/* This header generated by mk_method_wrappers from file /usr/include/lxc/lxccontainer.h
 * on Tue Feb 17 17:44:17 CET 2015.
 *
 * Do not edit!
 */

static bool
lxc_container_is_defined(struct lxc_container *self) {
    (self->is_defined)(self);
}

static const char *
lxc_container_state(struct lxc_container *self) {
    (self->state)(self);
}

static bool
lxc_container_is_running(struct lxc_container *self) {
    (self->is_running)(self);
}

static bool
lxc_container_freeze(struct lxc_container *self) {
    (self->freeze)(self);
}

static bool
lxc_container_unfreeze(struct lxc_container *self) {
    (self->unfreeze)(self);
}

static pid_t
lxc_container_init_pid(struct lxc_container *self) {
    (self->init_pid)(self);
}

static bool
lxc_container_load_config(struct lxc_container *self, const char *alt_file) {
    (self->load_config)(self, alt_file);
}

static bool
lxc_container_start(struct lxc_container *self, int useinit, char *const argv[]) {
    (self->start)(self, useinit, argv);
}

static bool
lxc_container_stop(struct lxc_container *self) {
    (self->stop)(self);
}

static bool
lxc_container_want_daemonize(struct lxc_container *self, bool state) {
    (self->want_daemonize)(self, state);
}

static bool
lxc_container_want_close_all_fds(struct lxc_container *self, bool state) {
    (self->want_close_all_fds)(self, state);
}

static char *
lxc_container_config_file_name(struct lxc_container *self) {
    (self->config_file_name)(self);
}

static bool
lxc_container_wait(struct lxc_container *self, const char *state, int timeout) {
    (self->wait)(self, state, timeout);
}

static bool
lxc_container_set_config_item(struct lxc_container *self, const char *key, const char *value) {
    (self->set_config_item)(self, key, value);
}

static bool
lxc_container_destroy(struct lxc_container *self) {
    (self->destroy)(self);
}

static bool
lxc_container_destroy_with_snapshots(struct lxc_container *self) {
    (self->destroy_with_snapshots)(self);
}

static bool
lxc_container_save_config(struct lxc_container *self, const char *alt_file) {
    (self->save_config)(self, alt_file);
}

static bool
lxc_container_create(struct lxc_container *self, const char *t, const char *bdevtype, struct bdev_specs *specs, int flags, char *const argv[]) {
    (self->create)(self, t, bdevtype, specs, flags, argv);
}

static bool
lxc_container_rename(struct lxc_container *self, const char *newname) {
    (self->rename)(self, newname);
}

static bool
lxc_container_reboot(struct lxc_container *self) {
    (self->reboot)(self);
}

static bool
lxc_container_shutdown(struct lxc_container *self, int timeout) {
    (self->shutdown)(self, timeout);
}

static void
lxc_container_clear_config(struct lxc_container *self) {
    (self->clear_config)(self);
}

static bool
lxc_container_clear_config_item(struct lxc_container *self, const char *key) {
    (self->clear_config_item)(self, key);
}

static int
lxc_container_get_config_item(struct lxc_container *self, const char *key, char *retv, int inlen) {
    (self->get_config_item)(self, key, retv, inlen);
}

static char *
lxc_container_get_running_config_item(struct lxc_container *self, const char *key) {
    (self->get_running_config_item)(self, key);
}

static int
lxc_container_get_keys(struct lxc_container *self, const char *key, char *retv, int inlen) {
    (self->get_keys)(self, key, retv, inlen);
}

static char **
lxc_container_get_interfaces(struct lxc_container *self) {
    (self->get_interfaces)(self);
}

static char **
lxc_container_get_ips(struct lxc_container *self, const char *interface, const char *family, int scope) {
    (self->get_ips)(self, interface, family, scope);
}

static int
lxc_container_get_cgroup_item(struct lxc_container *self, const char *subsys, char *retv, int inlen) {
    (self->get_cgroup_item)(self, subsys, retv, inlen);
}

static bool
lxc_container_set_cgroup_item(struct lxc_container *self, const char *subsys, const char *value) {
    (self->set_cgroup_item)(self, subsys, value);
}

static const char *
lxc_container_get_config_path(struct lxc_container *self) {
    (self->get_config_path)(self);
}

static bool
lxc_container_set_config_path(struct lxc_container *self, const char *path) {
    (self->set_config_path)(self, path);
}

static struct lxc_container *
lxc_container_clone(struct lxc_container *self, const char *newname, const char *lxcpath, int flags, const char *bdevtype, const char *bdevdata, uint64_t newsize, char **hookargs) {
    (self->clone)(self, newname, lxcpath, flags, bdevtype, bdevdata, newsize, hookargs);
}

static int
lxc_container_console_getfd(struct lxc_container *self, int *ttynum, int *masterfd) {
    (self->console_getfd)(self, ttynum, masterfd);
}

static int
lxc_container_console(struct lxc_container *self, int ttynum, int stdinfd, int stdoutfd, int stderrfd, int escape) {
    (self->console)(self, ttynum, stdinfd, stdoutfd, stderrfd, escape);
}

static int
lxc_container_attach(struct lxc_container *self, lxc_attach_exec_t exec_function, void *exec_payload, lxc_attach_options_t *options, pid_t *attached_process) {
    (self->attach)(self, exec_function, exec_payload, options, attached_process);
}

static int
lxc_container_attach_run_wait(struct lxc_container *self, lxc_attach_options_t *options, const char *program, const char *const argv[]) {
    (self->attach_run_wait)(self, options, program, argv);
}

static int
lxc_container_snapshot(struct lxc_container *self, const char *commentfile) {
    (self->snapshot)(self, commentfile);
}

static int
lxc_container_snapshot_list(struct lxc_container *self, struct lxc_snapshot **snapshots) {
    (self->snapshot_list)(self, snapshots);
}

static bool
lxc_container_snapshot_restore(struct lxc_container *self, const char *snapname, const char *newname) {
    (self->snapshot_restore)(self, snapname, newname);
}

static bool
lxc_container_snapshot_destroy(struct lxc_container *self, const char *snapname) {
    (self->snapshot_destroy)(self, snapname);
}

static bool
lxc_container_snapshot_destroy_all(struct lxc_container *self) {
    (self->snapshot_destroy_all)(self);
}

static bool
lxc_container_may_control(struct lxc_container *self) {
    (self->may_control)(self);
}

static bool
lxc_container_add_device_node(struct lxc_container *self, const char *src_path, const char *dest_path) {
    (self->add_device_node)(self, src_path, dest_path);
}

static bool
lxc_container_remove_device_node(struct lxc_container *self, const char *src_path, const char *dest_path) {
    (self->remove_device_node)(self, src_path, dest_path);
}

static bool
lxc_container_checkpoint(struct lxc_container *self, char *directory, bool stop, bool verbose) {
    (self->checkpoint)(self, directory, stop, verbose);
}

static bool
lxc_container_restore(struct lxc_container *self, char *directory, bool verbose) {
    (self->restore)(self, directory, verbose);
}

static void
lxc_snapshot_free(struct lxc_snapshot *self) {
    (self->free)(self);
}

